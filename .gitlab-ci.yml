image: node:16.15.0

stages:
  - build
  - release

build:
  stage: build

  script:
    - npm install
    - npm run build

  artifacts:
    paths:
      - build/
    when: on_success
    expire_in: 10 day

release:
  image: maven:3-jdk-8
  stage: release
  variables:
    # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
    # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
    MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
    # when running from the command line.
    # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

  # Cache downloaded dependencies and plugins between builds.
  cache:
    paths:
      - .m2/repository
  before_script:
    - echo "Building and publish the release"
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$GIT_SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - git config --global user.name $GIT_SERVICE_USER
    - git config --global user.email $GIT_SERVICE_USER_EMAIL
  script:
  - mvn $MAVEN_CLI_OPTS deploy scm:tag -Drevision=$CI_PIPELINE_IID -DaltDeploymentRepository=repo::default::http://${MAVEN_REPO_USER}:${MAVEN_REPO_PASS}@docker-esh.solaredge.com/artifactory/utility-mvn
  only:
  - master
  when: manual
  except: # Do not trigger a pipeline when pushing tags
    - tags
